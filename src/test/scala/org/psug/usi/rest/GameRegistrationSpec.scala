import org.psug.usi.domain.{Game, CreateGame}
import org.psug.usi.store.{PullData, DataPulled, ClearRepository}
import org.specs._

import com.sun.jersey.api.client._

import net.liftweb.json._
import org.psug.usi.netty._
import org.psug.usi.service.SimpleRepositoryServices
import scala.io.Source

import org.psug.usi.Main._

class GameRegistrationSpec extends SpecificationWithJUnit {

  implicit val formats = Serialization.formats(NoTypeHints)
  val listenPort = 12345

  def webResource( path:String ) = new Client().resource("http://localhost:"+listenPort+path)

  val setup = new SpecContext {
    val repositories = new SimpleRepositoryServices
    val webServer : WebServer = new WebServer(listenPort,repositories)

    // start/stop web server on each Specification
    beforeSpec { webServer.start; repositories.start  }
    afterSpec { webServer.stop ; repositories.stop }

    // clear repository on each example
    before(repositories.gameRepositoryService !? ClearRepository)
  }


  def registerGame(gameRegistration : CreateGame ):ClientResponse = {
     webResource("/api/game/").header("Content-Type","application/json").post(classOf[ClientResponse], Serialization.write(gameRegistration))
  }


  "game registration" should {
    shareVariables()

    "return forbidden http status if wrong authtoken is provided" in {
      val parameters = Source.fromFile( "./test-data/simplegamesession.xml" ).mkString

      val authToken = ""

      val response = registerGame( CreateGame( authToken, parameters ) )
      response.getStatus must be_==(ClientResponse.Status.UNAUTHORIZED.getStatusCode)
    }
    "store game if approprite authtoken is provided" in {
      val parameters = Source.fromFile( "./test-data/simplegamesession.xml" ).mkString
      val authToken = WEB_AUTHICATION_KEY
      val response = registerGame( CreateGame( authToken, parameters ) )
      response.getStatus must be_==(ClientResponse.Status.OK.getStatusCode)


      val DataPulled( Some( gameFound ) ) = setup.repositories.gameRepositoryService.remote !? PullData(1)
      gameFound must be_==( Game( parameters).copyWithAutoGeneratedId( 1 ) )

    }

  }
}