package org.psug.usi.rest

/**
 * User: alag
 * Date: 2/22/11
 * Time: 1:28 AM
 */


import org.specs._

import com.sun.jersey.api.client._

import net.liftweb.json._
import net.liftweb.json.Serialization.{read, write}
import org.psug.usi.netty._
import org.psug.usi.domain.User
import org.psug.usi.service.UserRepositoryService
import org.psug.usi.store.ClearRepository

class NettyUserRegistrationSpec  extends SpecificationWithJUnit {

  implicit val formats = Serialization.formats(NoTypeHints)

  val martinOdersky = User( "Martin", "Odersky","m.odersky@scala-lang.org","0xcafebabe")
  val myriamOdersky = User("Myriam", "Odersky","m.odersky@scala-lang.org","0xbabecafe")

  val listenPort = 12345

  def webResource( path:String ) = new Client().resource("http://localhost:"+listenPort+path)

  new SpecContext {
    val webServer : WebServer = new WebServer(listenPort)

    beforeSpec(webServer.start)
    afterSpec(webServer.stop)
  }

  "user registration" should {
    shareVariables()
    
    "succeeds if user does not exist" in { 
      UserRepositoryService !!  ClearRepository

      val response = webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], Serialization.write(martinOdersky))
      read[User](response).id must be_==(1)

      val expectedUser = martinOdersky.copyWithAutoGeneratedId( 1 )
      val user = read[User]( webResource("/api/user/1").get(classOf[String]) )
      user must be_==(expectedUser)
    }
    
    "fail if user with same email exists" in { 
      UserRepositoryService !! ClearRepository
    
      webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], Serialization.write(martinOdersky))
      webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], Serialization.write(myriamOdersky)) must throwA[UniformInterfaceException]
    }
  }

}
