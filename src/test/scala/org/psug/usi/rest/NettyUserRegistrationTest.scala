package org.psug.usi.rest

/**
 * User: alag
 * Date: 2/22/11
 * Time: 1:28 AM
 */


import org.junit.Assert._
import org.junit.Test

import org.hamcrest.CoreMatchers._
import com.sun.jersey.api.client._

import net.liftweb.json._
import net.liftweb.json.Serialization.{read, write}
import org.psug.usi.netty.WebServer
import org.psug.usi.domain.{UserRepository, User}

class NettyUserRegistrationTest {
  implicit val formats = Serialization.formats(NoTypeHints)

  val martinOdersky = User( "Martin", "Odersky","m.odersky@scala-lang.org","0xcafebabe")
  val myriamOdersky = User("Myriam", "Odersky","m.odersky@scala-lang.org","0xbabecafe")

  val webServer = WebServer.defaultWebServer
  def clearRepository = UserRepository ! UserRepository.Clear

  def webResource( path:String ) = new Client().resource("http://localhost:"+webServer.listenPort+path)

  @Test
  def succeedsIfUserDoesNotExist() = {
    clearRepository

    val response = webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], write(martinOdersky))
    assertThat(read[User](response).id, is(1))

    val expectedUser = martinOdersky.copyWithAutoGeneratedId( 1 )
    val user = read[User]( webResource("/api/user/1").get(classOf[String]) )
    assertThat(expectedUser,is(user))
  }

  @Test
  def doesNotSucceedIfUserWithSameEmailExists() = {
    clearRepository
    
    webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], write(martinOdersky))
    try {
      val response = webResource("/api/user/").header("Content-Type","application/json").post(classOf[String], write(myriamOdersky))
      fail("Expecting an exception here")
    } catch {
      case e : UniformInterfaceException => println( "OK"); assertThat(e.getResponse.getStatus,is(400))
    }
  }


}
