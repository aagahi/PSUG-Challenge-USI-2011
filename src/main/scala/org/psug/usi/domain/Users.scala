package org.psug.usi.domain

import org.psug.usi.store.{DataRepositoryMessage, Data, InMemoryDataRepository}

object User{
    def apply(firstName : String, lastName : String, email : String, password : String):User = User( 0, firstName, lastName, email, password )
}
case class User( id : Int, firstName : String, lastName : String, email : String, password : String) extends Data[Int]{
  def storeKey:Int = id
  def copyWithAutoGeneratedId( id:Int ) = User( id, firstName, lastName, email, password )
}


object UserRepository extends InMemoryDataRepository[Int,User]{

  case class PullDataByEmail( email : String ) extends DataRepositoryMessage

  override protected def checkConstraint( user:User )={
    dataByKey.values.find( _.email == user.email ).isEmpty
  }

  override def handleMessage( any:Any )={
    // matcher does not work with remote actors => scala bug???
    if( any.isInstanceOf[PullDataByEmail] ){
      val email = any.asInstanceOf[PullDataByEmail].email
      DataPulled( dataByKey.values.find( _.email == email ) )
    }
    else super.handleMessage( any )
  }
}
