package org.psug.usi.domain

import org.psug.usi.store.{BDBDataFactory, BDBSimpleDataFactory, BDBDataRepository, Data}
import com.sleepycat.je.DatabaseEntry
import java.io.{ByteArrayOutputStream, ObjectOutputStream, ByteArrayInputStream, ObjectInputStream}
import com.sleepycat.bind.tuple.{TupleOutput, TupleInput}

/**
 * User: alag
 * Date: 2/16/11
 * Time: 11:09 PM
 */

case class Game( id : Int=0, questions:Seq[Question], timeoutSec:Int=0, numPlayer:Int=0 ) extends Data[Int]{
  def storeKey:Int = id
  def copyWithAutoGeneratedId( id:Int ) = Game( id, questions, timeoutSec, numPlayer )
}

case class Question( question:String, answers:Seq[Answer], value:Int )

case class Answer( anwser:String, status:Boolean )


abstract class GameRepository extends BDBDataRepository[Int,Game]( "GameRepository",  new BDBSimpleDataFactory[Game] ){
  
  def incrementAndGetCurrentId:Int = { currentId += 1 ; currentId }
  def currentIdResetValue = 0

}









case class AnswerHistory( questionIndex:Int, answerIndex:Int )
case class GameUserKey( gameId:Int, userId:Int )
case class GameUserHistory( gameUser:GameUserKey, anwsers:List[AnswerHistory]) extends Data[GameUserKey]{
    def storeKey:GameUserKey = gameUser
    def copyWithAutoGeneratedId( id:GameUserKey ) = this
}


class BDBGameUserHistoryFactory extends BDBDataFactory[GameUserKey,GameUserHistory]{
  def entryToValue( entry:DatabaseEntry ):Option[GameUserHistory] ={
    val buffer = entry.getData
    if (buffer != null) {
      val ois = new ObjectInputStream(new ByteArrayInputStream(buffer))
      Some(ois.readObject().asInstanceOf[GameUserHistory])
    }
    else None
  }

  def entryToKey( entry:DatabaseEntry ):Option[GameUserKey] = {
    if( entry.getData != null ){
        val ti  = new TupleInput( entry.getData )
        Some( GameUserKey( ti.readInt, ti.readInt ) )
    }
    else None
  }

  def keyToEntry( key:GameUserKey ):DatabaseEntry={
    val to = new TupleOutput()
    to.writeInt( key.gameId )
    to.writeInt( key.userId )
    val entry = new DatabaseEntry( to.getBufferBytes )
    entry
  }
    
  def valueToEntry( value:GameUserHistory ):DatabaseEntry={
    val baos = new ByteArrayOutputStream()
    val oos = new ObjectOutputStream(baos)
    oos.writeObject(value)
    new DatabaseEntry(baos.toByteArray)
  }
}

abstract class GameUserHistoryRepository extends BDBDataRepository[GameUserKey,GameUserHistory]( "GameUserHistoryRepository",  new BDBGameUserHistoryFactory ){
  def incrementAndGetCurrentId:GameUserKey = { currentId }
  def currentIdResetValue = GameUserKey(0,0)
}
