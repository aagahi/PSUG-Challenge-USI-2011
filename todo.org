#+TITLE: Challenge USI

** Perf

 - 350ms par requête

** Fonctionnel

 - don't forget the tests

*** DONE creation base de joueur
*** DONE core game management
*** TODO implementation login + generation cookie
    :PROPERTIES:
    :WHO:      abailly
    :END:
    - pb stockage acteur representant joueur
*** TODO separation des couches
    :PROPERTIES:
    :WHO:      abailly
    :END:
*** TODO cablage HTTP login
    :PROPERTIES:
    :WHO:      abailly
    :END:
*** TODO initialisation partie : cablage HTTP
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO cablage HTTP du Game registering
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO cablage HTTP des questions/reponses
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO cablage HTTP ranking final
    - plus de score à chaque question
    :PROPERTIES:
    :WHO:      abailly
    :END:
*** TODO prise en compte de la valeur des questions
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** DONE traitement du bonus dans le scoring du joueur
*** TODO tweet final
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO persistance miroir/backup des users
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO persister historique des réponses d'un utilisateur
    :PROPERTIES:
    :WHO:      aagahi
    :END:
*** TODO resilience ? comment distribuer le scorer ?
    :PROPERTIES:
    :WHO:      abailly
    :END:
    - au moins 2 scorer en miroir pour etre résilient
    - chaque résultat de réponse est diffusé sur au moins 2 noeuds
    - scorer fonctionne en tâche de fond
*** TODO fournir une reponse d'un joueur + question
    :PROPERTIES:
    :WHO:      abailly
    :END:
*** TODO cablage HTTP audit 
    :PROPERTIES:
    :WHO:      abailly
    :END:
*** TODO IHM HTML
    :PROPERTIES:
    :WHO:      gbadin
    :END:
*** TODO test perf du scorer
    :PROPERTIES:
    :WHO:      abailly
    :END:
    - utiliser tableau trié des id de joueurs
**** TODO test de charge memoire pour 1M joueurs
**** TODO test de perf pour 1M joueurs/maj au fil de l'eau
**** TODO tester connexion/deconnexion d'un joueur relocalisé
*** TODO test perf de netty
    :PROPERTIES:
    :WHO:      abailly
    :END:

** Répartition

*** TODO add roles to agents when deploying jar
    - netty
    - game manager: 
      - register actor with underlying remoting engine
      - use config file for defining remoting
